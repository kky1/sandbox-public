-- COMBINED QUERIES FOR FINAL LIST - GENERAL TRAVEL LIST
-- LIST INCLUDES SPECIFIED UNIT ASSIGNED PROSPECT & LIVING GRADS 
-- LIST CONCATENATES THE FOLLOWING INTO ONE FIELD: GOAL SETTING INFO, OTHER_STAFF FOR SPECIFIED UNIT, DEGREE INFO FOR ENTITY & SPOUSE

-- (1) DECLARES AND SET VARIABLES  

DECLARE @unit varchar(10)
DECLARE @campaignenddate date 

-- ENTER YOUR UNIT CODE BELOW WITH THE SINGLE QUOTATION MARKS - THEN CLICK "RUN" AT TOP LEFT CORNER
-- ONCE THE LIST IS GENERATED, CLICK ON EXPORT TO EXCEL LOCATED AT THE FAR RIGHT - 2ND ICON FROM THE TOP - IN THE RESULTS SECTION BELOW

SET @unit = 'ENG'
SET @campaignenddate = '2022-06-30'

-- DROP ALL TEMP TABLES 

DROP TABLE IF EXISTS #GENERAL
DROP TABLE IF EXISTS #GENERAL1
DROP TABLE IF EXISTS #BD1
DROP TABLE IF EXISTS #BD2
DROP TABLE IF EXISTS #SBD1
DROP TABLE IF EXISTS #SBD2
DROP TABLE IF EXISTS #SBD3
DROP TABLE IF EXISTS #DEG1
DROP TABLE IF EXISTS #DEG2
DROP TABLE IF EXISTS #DEG3
DROP TABLE IF EXISTS #DEG4
DROP TABLE IF EXISTS #DEG5
DROP TABLE IF EXISTS #DEG6
DROP TABLE IF EXISTS #DEG7
DROP TABLE IF EXISTS #DEG8
DROP TABLE IF EXISTS #SPOUSE1
DROP TABLE IF EXISTS #SPOUSE2
DROP TABLE IF EXISTS #SPOUSE3
DROP TABLE IF EXISTS #SPOUSE4
DROP TABLE IF EXISTS #SPOUSE5
DROP TABLE IF EXISTS #SPOUSE6
DROP TABLE IF EXISTS #SPOUSE7
DROP TABLE IF EXISTS #SPOUSE8
DROP TABLE IF EXISTS #SPOUSE9
DROP TABLE IF EXISTS #ROC1
DROP TABLE IF EXISTS #ROC2
DROP TABLE IF EXISTS #ROC3
DROP TABLE IF EXISTS #ROC4
DROP TABLE IF EXISTS #ZIP1
DROP TABLE IF EXISTS #ZIP2
DROP TABLE IF EXISTS #SPOUSE10
DROP TABLE IF EXISTS #SPOUSE11
DROP TABLE IF EXISTS #SA1
DROP TABLE IF EXISTS #GGA1
DROP TABLE IF EXISTS #GGA2
DROP TABLE IF EXISTS #KA1
DROP TABLE IF EXISTS #KA2
DROP TABLE IF EXISTS #EW1
DROP TABLE IF EXISTS #EW2
DROP TABLE IF EXISTS #PT1
DROP TABLE IF EXISTS #PT2
DROP TABLE IF EXISTS #OS1
DROP TABLE IF EXISTS #OS2
DROP TABLE IF EXISTS #OS3
DROP TABLE IF EXISTS #GS1
DROP TABLE IF EXISTS #GS2
DROP TABLE IF EXISTS #GS3
DROP TABLE IF EXISTS #GS4
DROP TABLE IF EXISTS #GIFT1
DROP TABLE IF EXISTS #GIFT2
DROP TABLE IF EXISTS #GIFT3
DROP TABLE IF EXISTS #GIFT4
DROP TABLE IF EXISTS #GENERAL_EXPORT;


-- (2) CREATES TEMP TABLE #GENERAL
-- QRY PULLS ALL ASSIGNED (PM, SP OR OS)

SELECT distinct BIO.ID_NUMBER, BIO.PROSPECT_ID
INTO #GENERAL1
FROM PSU_MV_DEN_BIO BIO
INNER JOIN ASSIGNMENT a
    ON BIO.PROSPECT_ID = a.PROSPECT_ID
WHERE ((BIO.RECORD_STATUS_CODE)<>'D')
AND (((BIO.PRIMARY_IND)='Y') AND ((a.OFFICE_CODE)=@unit) and ((a.ACTIVE_IND)='Y') and ((a.ASSIGNMENT_TYPE) IN ('sp', 'pm', 'os')))

UNION

-- QRY TO ADD SCHOOL_CODE GRADS 

SELECT distinct BIO.ID_NUMBER, BIO.PROSPECT_ID
FROM PSU_MV_DEN_BIO BIO
INNER JOIN DEGREES d
    ON BIO.ID_NUMBER = d.ID_NUMBER
WHERE BIO.RECORD_STATUS_CODE <>'D'
AND (d.SCHOOL_CODE=@unit
AND d.INSTITUTION_CODE = '39501'
AND d.DEGREE_LEVEL_CODE IS NOT NULL AND d.DEGREE_LEVEL_CODE <> ' ' AND d.DEGREE_LEVEL_CODE <> 'N')

-- REMOVES DUPLICATES FOR THE ID & PROSPECT ID
SELECT DISTINCT gids.ID_NUMBER, gids.PROSPECT_ID
INTO #GENERAL1
FROM #GENERAL gids
GROUP BY gids.ID_NUMBER,
        gids.PROSPECT_ID

-- (3) SQL TO CALCULATE AGE AND CAMPAIGN END AGE

DROP TABLE IF EXISTS #BD1
DROP TABLE IF EXISTS #BD2;

(SELECT BIO.ID_NUMBER, CONVERT(date,((BIO.BIRTH_MONTH)+'/'+(BIO.BIRTH_DAY)+'/'+(BIO.BIRTH_YEAR)),101) AS BIRTH_DT2
INTO #BD1
FROM PSU_MV_DEN_BIO BIO
INNER JOIN #GENERAL1 gen
    ON BIO.ID_NUMBER = gen.ID_NUMBER
WHERE (BIO.RECORD_STATUS_CODE)<>'D'
AND BIO.BIRTH_DT IS NOT NULL)

SELECT bd.ID_NUMBER, bd.BIRTH_DT2, DATEDIFF(year,bd.BIRTH_DT2,GETDATE()) AS AGE, DATEDIFF(year,bd.BIRTH_DT2, @campaignenddate) AS CAMPAIGN_END_AGE
INTO #BD2
FROM #BD1 bd

-- (4) SQL TO CALCULATE SPOUSE'S AGE

DROP TABLE IF EXISTS #SBD1
DROP TABLE IF EXISTS #SBD2
DROP TABLE IF EXISTS #SBD3;

-- joins den bio to entity to find spouse birth dates

SELECT BIO.ID_NUMBER, BIO.SPOUSE_ID_NUMBER, ent.SPOUSE_BIRTH_DT, SUBSTRING(ent.SPOUSE_BIRTH_DT,1,4) AS SPOUSE_BIRTH_YEAR, SUBSTRING(ent.SPOUSE_BIRTH_DT,5,2) AS SPOUSE_BIRTH_MONTH, SUBSTRING(ent.SPOUSE_BIRTH_DT,7,2) AS SPOUSE_BIRTH_DAY
INTO #SBD1
FROM PSU_MV_DEN_BIO BIO
INNER JOIN #GENERAL1 gen
    ON BIO.ID_NUMBER = gen.ID_NUMBER
INNER JOIN ENTITY ent
    ON BIO.ID_NUMBER = ent.ID_NUMBER
WHERE (BIO.RECORD_STATUS_CODE <>'D'
AND ent.MARITAL_STATUS_CODE = 'M')

-- update query below adds spouse birth date from den bio for spouse awa records if the spouse birth date data from the marital screen (entity table) is null

UPDATE sbd
SET     sbd.SPOUSE_BIRTH_DAY = BIO.BIRTH_DAY,
        sbd.SPOUSE_BIRTH_MONTH = BIO.BIRTH_MONTH,
        sbd.SPOUSE_BIRTH_YEAR = BIO.BIRTH_YEAR,
        sbd.SPOUSE_BIRTH_DT = BIO.BIRTH_DT
FROM #SBD1 sbd
LEFT JOIN PSU_MV_DEN_BIO BIO
        ON sbd.SPOUSE_ID_NUMBER = BIO.ID_NUMBER
WHERE (BIO.BIRTH_DT IS NOT NULL
AND sbd.SPOUSE_BIRTH_DT IS NULL)
OR (BIO.BIRTH_DT IS NOT NULL
AND sbd.SPOUSE_BIRTH_DT = '00000000')


-- qry converts spouse birth date data from temp table (date, @month +'/'+ @day +'/'+ @year, 101) as a date - needs <>00 clauses since birth dates for spouse entered inconsistently in awa

SELECT sbd.ID_NUMBER, sbd.SPOUSE_ID_NUMBER, CONVERT(date, SPOUSE_BIRTH_MONTH +'/'+ SPOUSE_BIRTH_DAY +'/'+ SPOUSE_BIRTH_YEAR, 101) AS SPOUSE_BIRTH_DATE
INTO #SBD2
FROM #SBD1 sbd
WHERE SPOUSE_BIRTH_MONTH <> '00' AND SPOUSE_BIRTH_DAY <>'00' AND SPOUSE_BIRTH_YEAR <> '0000'
AND SPOUSE_BIRTH_MONTH IS NOT NULL AND SPOUSE_BIRTH_DAY IS NOT NULL AND SPOUSE_BIRTH_YEAR IS NOT NULL
AND SPOUSE_BIRTH_MONTH <> ' ' AND SPOUSE_BIRTH_DAY <> ' ' AND SPOUSE_BIRTH_YEAR <> ' '

-- now converted to a date, use datediff function to calculate age

SELECT sbd2.ID_NUMBER, sbd2.SPOUSE_ID_NUMBER, sbd2.SPOUSE_BIRTH_DATE, DATEDIFF(year,sbd2.SPOUSE_BIRTH_DATE,GETDATE()) AS SPOUSE_AGE, DATEDIFF(year,sbd2.SPOUSE_BIRTH_DATE, @campaignenddate) AS SPOUSE_CAMPAIGN_END_AGE
INTO #SBD3
FROM #SBD2 sbd2

-- (5) CREATES COUNT OF PSU AND SCHOOL_CODE_SPECIFIED DEGREES

DROP TABLE IF EXISTS #DEG1
DROP TABLE IF EXISTS #DEG3
DROP TABLE IF EXISTS #DEG4
DROP TABLE IF EXISTS #DEG5;

SELECT DISTINCT BIO.ID_NUMBER, d.DEGREE_YEAR, d.DEGREE_CODE, d.SCHOOL_CODE, d.CAMPUS_CODE
INTO #DEG1
FROM PSU_MV_DEN_BIO BIO
INNER JOIN #GENERAL1 gen
    ON BIO.ID_NUMBER = gen.ID_NUMBER
INNER JOIN DEGREES d
    ON BIO.ID_NUMBER = d.ID_NUMBER
WHERE ((BIO.RECORD_STATUS_CODE) <> 'D'
AND ((d.INSTITUTION_CODE) = '39501')
AND d.DEGREE_LEVEL_CODE IS NOT NULL AND d.DEGREE_LEVEL_CODE <> ' ' AND d.DEGREE_LEVEL_CODE <> 'N')

SELECT DISTINCT d1.ID_NUMBER, COUNT(d1.ID_NUMBER) AS #PSU_DEGREES
INTO #DEG3
FROM #DEG1 d1
GROUP BY d1.ID_NUMBER

SELECT DISTINCT d1.ID_NUMBER, COUNT(d1.ID_NUMBER) AS #SCHOOL_SPECIFIC_DEGREES
INTO #DEG4
FROM #DEG1 d1
WHERE d1.SCHOOL_CODE = @unit
GROUP BY d1.ID_NUMBER

SELECT DISTINCT d1.ID_NUMBER, d3.#PSU_DEGREES, d4.#SCHOOL_SPECIFIC_DEGREES
INTO #DEG5
FROM #DEG1 d1
LEFT JOIN #DEG3 d3
    ON d1.ID_NUMBER = d3.ID_NUMBER
LEFT JOIN #DEG4 d4
    ON d1.ID_NUMBER = d4.ID_NUMBER
ORDER BY d1.ID_NUMBER

-- (6) CREATE TEMP TABLE FOR DEGREE CONCATENATION

DROP TABLE IF EXISTS #DEG8
DROP TABLE IF EXISTS #DEG2
DROP TABLE IF EXISTS #DEG6
DROP TABLE IF EXISTS #DEG7;

SELECT DISTINCT BIO.ID_NUMBER, d.DEGREE_YEAR, d.DEGREE_CODE, d.SCHOOL_CODE, d.CAMPUS_CODE, (maj.SHORT_DESC) AS MAJOR
INTO #DEG8
FROM PSU_MV_DEN_BIO BIO
INNER JOIN #GENERAL1 gen
    ON BIO.ID_NUMBER = gen.ID_NUMBER
INNER JOIN DEGREES d
    ON BIO.ID_NUMBER = d.ID_NUMBER
LEFT JOIN TMS_MAJORS maj
    ON d.MAJOR_CODE1 = maj.MAJOR_CODE
WHERE ((d.INSTITUTION_CODE) = '39501')
AND d.DEGREE_LEVEL_CODE IS NOT NULL AND d.DEGREE_LEVEL_CODE <> ' ' AND d.DEGREE_LEVEL_CODE <> 'N'

SELECT d8.ID_NUMBER, CONCAT(d8.DEGREE_YEAR,', ', d8.DEGREE_CODE,', ', d8.SCHOOL_CODE,', ', d8.MAJOR, ', ', d8.CAMPUS_CODE) AS DEGREE_INFO
INTO #DEG2
FROM #DEG8 d8

SELECT DISTINCT d8.ID_NUMBER, d2.DEGREE_INFO
INTO #DEG6
FROM #DEG8 d8
LEFT JOIN #DEG2 d2 
    ON d8.ID_NUMBER = d2.ID_NUMBER
ORDER BY d8.ID_NUMBER

SELECT d6.ID_NUMBER,
    STRING_AGG(d6.DEGREE_INFO, '; ')
        WITHIN GROUP (ORDER BY d6.DEGREE_INFO ASC) AS DEGREE_INFO
INTO #DEG7
FROM #DEG6 d6
GROUP BY d6.ID_NUMBER

-- (7) CREATE TEMP TABLE OF SPOUSE #PSU AND #SCHOOL_CODE_SPECIFIED DEGREES

DROP TABLE IF EXISTS #SPOUSE2
DROP TABLE IF EXISTS #SPOUSE3
DROP TABLE IF EXISTS #SPOUSE4
DROP TABLE IF EXISTS #SPOUSE5
DROP TABLE IF EXISTS #SPOUSE6;

SELECT DISTINCT BIO.ID_NUMBER, BIO.SPOUSE_ID_NUMBER
INTO #SPOUSE2
FROM PSU_MV_DEN_BIO BIO
INNER JOIN #GENERAL1 gen
    ON BIO.ID_NUMBER = gen.ID_NUMBER
WHERE ((BIO.RECORD_STATUS_CODE)<>'D'
AND (BIO.MARITAL_STATUS_CODE)='M')

-- link spouse id to den bio for degree info

SELECT DISTINCT sp2.ID_NUMBER, sp2.SPOUSE_ID_NUMBER, sd.DEGREE_YEAR AS SPOUSE_DEGREE_YEAR, sd.DEGREE_CODE AS SPOUSE_DEGREE_CODE, sd.CAMPUS_CODE AS SPOUSE_CAMPUS_CODE, sd.SCHOOL_CODE AS SPOUSE_SCHOOL_CODE, sd.MAJOR_CODE1 AS SPOUSE_MAJOR_CODE, smaj.SHORT_DESC AS SPOUSE_MAJOR
INTO #SPOUSE3
FROM #SPOUSE2 sp2
INNER JOIN DEGREES sd
    ON sp2.SPOUSE_ID_NUMBER = sd.ID_NUMBER
LEFT JOIN TMS_MAJORS smaj
    ON sd.MAJOR_CODE1 = smaj.MAJOR_CODE
WHERE ((sd.INSTITUTION_CODE) = '39501')
AND sd.DEGREE_LEVEL_CODE IS NOT NULL AND sd.DEGREE_LEVEL_CODE <> ' ' AND sd.DEGREE_LEVEL_CODE <> 'N'

SELECT DISTINCT sp3.ID_NUMBER, COUNT(sp3.ID_NUMBER) AS #SPOUSE_PSU_DEGREES
INTO #SPOUSE4
FROM #SPOUSE3 sp3
GROUP BY sp3.ID_NUMBER

SELECT DISTINCT sp3.ID_NUMBER, COUNT(sp3.ID_NUMBER) AS #SPOUSE_SPECIFIC_SCHOOL_CODE_DEGREES
INTO #SPOUSE5
FROM #SPOUSE3 sp3
WHERE sp3.SPOUSE_SCHOOL_CODE = @unit
GROUP BY sp3.ID_NUMBER

SELECT sp3.ID_NUMBER, sp4.#SPOUSE_PSU_DEGREES, sp5.#SPOUSE_SPECIFIC_SCHOOL_CODE_DEGREES
INTO #SPOUSE6
FROM #SPOUSE3 sp3
LEFT JOIN #SPOUSE4 sp4
    ON sp3.ID_NUMBER = sp4.ID_NUMBER
LEFT JOIN #SPOUSE5 sp5
    ON sp3.ID_NUMBER = sp5.ID_NUMBER

-- (8) CREATE TEMP TABLE OF SPOUSE CONCAT DEGREES

DROP TABLE IF EXISTS #SPOUSE1
DROP TABLE IF EXISTS #SPOUSE8
DROP TABLE IF EXISTS #SPOUSE9
DROP TABLE IF EXISTS #SPOUSE7;

SELECT DISTINCT BIO.ID_NUMBER, BIO.SPOUSE_ID_NUMBER
INTO #SPOUSE1
FROM PSU_MV_DEN_BIO BIO
INNER JOIN #GENERAL1 gen
    ON BIO.ID_NUMBER = gen.ID_NUMBER
WHERE ((BIO.RECORD_STATUS_CODE)<>'D'
AND (BIO.MARITAL_STATUS_CODE)='M')

-- link spouse id back to den bio for degree info

SELECT DISTINCT sp1.ID_NUMBER, sp1.SPOUSE_ID_NUMBER, sd.DEGREE_YEAR AS SPOUSE_DEGREE_YEAR, sd.DEGREE_CODE AS SPOUSE_DEGREE_CODE, sd.CAMPUS_CODE AS SPOUSE_CAMPUS_CODE, sd.SCHOOL_CODE AS SPOUSE_SCHOOL_CODE, sd.MAJOR_CODE1 AS SPOUSE_MAJOR_CODE, smaj.SHORT_DESC AS SPOUSE_MAJOR
INTO #SPOUSE7
FROM #SPOUSE1 sp1
INNER JOIN DEGREES sd
    ON sp1.SPOUSE_ID_NUMBER = sd.ID_NUMBER
LEFT JOIN TMS_MAJORS smaj
    ON sd.MAJOR_CODE1 = smaj.MAJOR_CODE
WHERE ((sd.INSTITUTION_CODE) = '39501')
AND sd.DEGREE_LEVEL_CODE IS NOT NULL AND sd.DEGREE_LEVEL_CODE <> ' ' AND sd.DEGREE_LEVEL_CODE <> 'N'

SELECT sp7.ID_NUMBER, sp7.SPOUSE_ID_NUMBER, CONCAT(sp7.SPOUSE_DEGREE_YEAR, ', ', sp7.SPOUSE_DEGREE_CODE, ', ', sp7.SPOUSE_SCHOOL_CODE, ', ', sp7.SPOUSE_MAJOR, ', ', sp7.SPOUSE_CAMPUS_CODE) AS SPOUSE_DEGREE_INFO
INTO #SPOUSE8
FROM #SPOUSE7 sp7

SELECT sp8.ID_NUMBER,
    STRING_AGG(sp8.SPOUSE_DEGREE_INFO, '; ')
        WITHIN GROUP (ORDER BY sp8.SPOUSE_DEGREE_INFO ASC) AS SPOUSE_DEGREE_INFO
INTO #SPOUSE9
FROM #SPOUSE8 sp8
GROUP BY sp8.ID_NUMBER

-- (9) SUBQUERY FOR LAST ROC 

DROP TABLE IF EXISTS #ROC1
DROP TABLE IF EXISTS #ROC3;

(SELECT BIO.ID_NUMBER, MAX(cr.CONTACT_DATE) AS LAST_ROC_DT
INTO #ROC1
FROM PSU_MV_DEN_BIO BIO
INNER JOIN #GENERAL1 gen
    ON BIO.ID_NUMBER = gen.ID_NUMBER
INNER JOIN PSU_P_V_CONTACT_REPORTS cr
    ON BIO.ID_NUMBER = cr.CREDITED_ID
WHERE ((BIO.RECORD_STATUS_CODE)<>'D')
    GROUP BY
        BIO.ID_NUMBER)

SELECT crq.ID_NUMBER, CONVERT(varchar,crq.LAST_ROC_DT,101) AS LAST_ROC_DT2, tcrt.SHORT_DESC AS LAST_ROC_TYPE, tcro.SHORT_DESC AS LAST_ROC_OUTCOME
INTO #ROC3
FROM #ROC1 crq
INNER JOIN PSU_P_V_CONTACT_REPORTS cr
    ON crq.ID_NUMBER = cr.CREDITED_ID
LEFT JOIN TMS_CONTACT_RPT_TYPE tcrt
    ON cr.CONTACT_TYPE = tcrt.CONTACT_TYPE
LEFT JOIN TMS_CONTACT_OUTCOME tcro
    ON cr.CONTACT_OUTCOME = tcro.CONTACT_OUTCOME_CODE
WHERE crq.LAST_ROC_DT = cr.CONTACT_DATE

-- (10) SUBQUERY FOR LAST VISIT

DROP TABLE IF EXISTS #ROC2
DROP TABLE IF EXISTS #ROC4;

(SELECT BIO.ID_NUMBER, MAX(cr.CONTACT_DATE) AS LAST_VISIT_DT
INTO #ROC2
FROM PSU_MV_DEN_BIO BIO
INNER JOIN #GENERAL1 gen
    ON BIO.ID_NUMBER = gen.ID_NUMBER
INNER JOIN PSU_P_V_CONTACT_REPORTS cr
    ON BIO.ID_NUMBER = cr.CREDITED_ID
WHERE ((BIO.RECORD_STATUS_CODE)<>'D')
AND ((cr.CONTACT_TYPE)='P')
    GROUP BY
        BIO.ID_NUMBER)

SELECT crq2.ID_NUMBER, CONVERT(varchar,crq2.LAST_VISIT_DT,101) AS LAST_VISIT_DT2, tcro.SHORT_DESC AS LAST_VISIT_OUTCOME
INTO #ROC4
FROM #ROC2 crq2
INNER JOIN PSU_P_V_CONTACT_REPORTS cr
    ON crq2.ID_NUMBER = cr.CREDITED_ID
LEFT JOIN TMS_CONTACT_OUTCOME tcro
    ON cr.CONTACT_OUTCOME = tcro.CONTACT_OUTCOME_CODE

WHERE crq2.LAST_VISIT_DT = cr.CONTACT_DATE

-- (11) SUBQUERY TO PULL LATITUDE AND LONGITUDE

DROP TABLE IF EXISTS #ZIP1
DROP TABLE IF EXISTS #ZIP2;

SELECT BIO.ID_NUMBER, BIO.PREF_ZIPCODE, LEFT(PREF_ZIPCODE,5) AS FIVEDIGITZIP
INTO #ZIP1 
FROM PSU_MV_DEN_BIO BIO
INNER JOIN #GENERAL1 gen
    ON BIO.ID_NUMBER = gen.ID_NUMBER
WHERE BIO.RECORD_STATUS_CODE = 'A'

SELECT zp.ID_NUMBER, zp.PREF_ZIPCODE, zc.START_ZIP, zc.LATITUDE, zc.LONGITUDE
INTO #ZIP2
FROM #ZIP1 zp
INNER JOIN ZIP_CITY zc
    ON zp.FIVEDIGITZIP = zc.START_ZIP

-- (12) SUBQUERY TO OBTAIN SPOUSE HJT 

DROP TABLE IF EXISTS #SPOUSE10
DROP TABLE IF EXISTS #SPOUSE11;

SELECT BIO.ID_NUMBER, BIO.SPOUSE_ID_NUMBER
INTO #SPOUSE10
FROM PSU_MV_DEN_BIO BIO
INNER JOIN #GENERAL1 gen
    ON BIO.ID_NUMBER = gen.ID_NUMBER
WHERE ((BIO.RECORD_STATUS_CODE)<>'D'
AND (BIO.MARITAL_STATUS_CODE)='M')

-- link spouse id back to den bio and tms for hjt text

SELECT sp10.ID_NUMBER, sp10.SPOUSE_ID_NUMBER, BIO.JOB_TITLE AS SPOUSE_JOB_TITLE, BIO.EMPLOYER_NAME1 AS SPOUSE_EMPLOYER, BIO.POSITION_LEVEL_CODE, thjt.SHORT_DESC AS SPOUSE_HJT
INTO #SPOUSE11
FROM #SPOUSE10 sp10
INNER JOIN PSU_MV_DEN_BIO BIO
    ON BIO.ID_NUMBER = sp10.SPOUSE_ID_NUMBER
LEFT JOIN TMS_POSITION_LEVEL thjt
    ON BIO.POSITION_LEVEL_CODE = thjt.POSITION_LEVEL_CODE

-- (13) SUBQUERY TO COUNT STUDENT ACTIVITIES (SA) AT PSU

DROP TABLE IF EXISTS #SA1;

SELECT BIO.ID_NUMBER, COUNT(sa.STUDENT_ACTIVITY_CODE) AS #PSU_STUDENT_ACTIVITIES
INTO #SA1
FROM PSU_MV_DEN_BIO BIO
INNER JOIN #GENERAL1 gen
    ON BIO.ID_NUMBER = gen.ID_NUMBER
INNER JOIN STUDENT_ACTIVITY sa
    ON BIO.ID_NUMBER = sa.ID_NUMBER
INNER JOIN TMS_STUDENT_ACT tsa
    ON sa.STUDENT_ACTIVITY_CODE = tsa.STUDENT_ACTIVITY_CODE
WHERE BIO.RECORD_STATUS_CODE <> 'D'
AND sa.STUDENT_ACTIVITY_CODE IS NOT NULL AND sa.STUDENT_ACTIVITY_CODE <> ' '
GROUP BY BIO.ID_NUMBER

-- (14) SUBQUERY FOR OBTAINING GGA RATING 

DROP TABLE IF EXISTS #GGA1
DROP TABLE IF EXISTS #GGA2;

(SELECT BIO.ID_NUMBER, ev.EVALUATION_TYPE, MAX(ev.EVALUATION_DATE) AS GGA_DATE, ev.ACTIVE_IND
INTO #GGA1
FROM PSU_MV_DEN_BIO BIO
INNER JOIN #GENERAL1 gen
    ON BIO.ID_NUMBER = gen.ID_NUMBER
INNER JOIN EVALUATION ev
    ON BIO.ID_NUMBER = ev.ID_NUMBER

WHERE ((BIO.RECORD_STATUS_CODE)<>'D')
AND  ((ev.EVALUATION_TYPE)='GE')
AND ((ev.ACTIVE_IND)='Y')
    
    GROUP BY
        BIO.ID_NUMBER,
        ev.EVALUATION_TYPE,
        ev.ACTIVE_IND)

SELECT gga.ID_NUMBER, CONVERT(varchar,gga.GGA_DATE,101) AS GGA_DATE, tgga.SHORT_DESC AS GGA_RATING
INTO #GGA2
FROM #GGA1 gga
INNER JOIN EVALUATION ev
    ON gga.ID_NUMBER = ev.ID_NUMBER
LEFT JOIN TMS_RATING tgga
    ON ev.RATING_CODE = tgga.RATING_CODE

WHERE gga.GGA_DATE = ev.EVALUATION_DATE
AND gga.EVALUATION_TYPE = ev.EVALUATION_TYPE
AND gga.ACTIVE_IND = ev.ACTIVE_IND;

-- (15) SUBQUERY FOR OBTAINING KA 

SET ANSI_WARNINGS OFF;
DROP TABLE IF EXISTS #KA1
DROP TABLE IF EXISTS #KA2;

(SELECT BIO.ID_NUMBER, ev.EVALUATION_TYPE, MAX(ev.EVALUATION_DATE) AS KA_DATE, ev.ACTIVE_IND
INTO #KA1
FROM PSU_MV_DEN_BIO BIO
INNER JOIN #GENERAL1 gen
    ON BIO.ID_NUMBER = gen.ID_NUMBER
INNER JOIN EVALUATION ev
    ON BIO.ID_NUMBER = ev.ID_NUMBER
WHERE ((BIO.RECORD_STATUS_CODE)<>'D')
AND  ((ev.EVALUATION_TYPE)='KA')
AND ((ev.ACTIVE_IND)='Y')
    GROUP BY
        BIO.ID_NUMBER,
        ev.EVALUATION_TYPE,
        ev.ACTIVE_IND)

SELECT ka.ID_NUMBER, CONVERT(varchar,ka.KA_DATE,101) AS KA_DATE, FORMAT(ev.RATED_AMT, 'C0') AS KA_AMT, tka.SHORT_DESC AS KA_RATING, ev.XCOMMENT AS KA_COMMENT
INTO #KA2
FROM #KA1 ka
INNER JOIN EVALUATION ev
    ON ka.ID_NUMBER = ev.ID_NUMBER
LEFT JOIN TMS_RATING tka
    ON ev.RATING_CODE = tka.RATING_CODE
WHERE ka.KA_DATE = ev.EVALUATION_DATE
AND ka.EVALUATION_TYPE = ev.EVALUATION_TYPE
AND ka.ACTIVE_IND = ev.ACTIVE_IND
SET ANSI_WARNINGS ON;

-- (16) SUBQUERY FOR OBTAINING EW 

SET ANSI_WARNINGS OFF;
DROP TABLE IF EXISTS #EW1
DROP TABLE IF EXISTS #EW2;

(SELECT BIO.ID_NUMBER, ev.EVALUATION_TYPE, MAX(ev.EVALUATION_DATE) AS EW_DATE, ev.ACTIVE_IND
INTO #EW1
FROM PSU_MV_DEN_BIO BIO
INNER JOIN #GENERAL1 gen
    ON BIO.ID_NUMBER = gen.ID_NUMBER
INNER JOIN EVALUATION ev
    ON BIO.ID_NUMBER = ev.ID_NUMBER
WHERE ((BIO.RECORD_STATUS_CODE)<>'D')
AND  ((ev.EVALUATION_TYPE)='EW')
AND ((ev.ACTIVE_IND)='Y')
    GROUP BY
        BIO.ID_NUMBER,
        ev.EVALUATION_TYPE,
        ev.ACTIVE_IND)

SELECT ew.ID_NUMBER, CONVERT(varchar,ew.EW_DATE,101) AS EW_DATE, FORMAT(ev.RATED_AMT, 'C0') AS EW_AMT, tew.SHORT_DESC AS EW_RATING
INTO #EW2
FROM #EW1 ew
INNER JOIN EVALUATION ev
    ON ew.ID_NUMBER = ev.ID_NUMBER
LEFT JOIN TMS_RATING tew
    ON ev.RATING_CODE = tew.RATING_CODE
WHERE ew.EW_DATE = ev.EVALUATION_DATE
AND ew.EVALUATION_TYPE = ev.EVALUATION_TYPE
AND ew.ACTIVE_IND = ev.ACTIVE_IND
SET ANSI_WARNINGS ON;

-- (17) SUBQUERY FOR OBTAINING PENDING TASK

DROP TABLE IF EXISTS #PT1
DROP TABLE IF EXISTS #PT2;

(SELECT BIO.PROSPECT_ID, MAX(tk.SCHED_DATE) AS PT_DATE, tk.UNIT_CODE
INTO #PT1
FROM PSU_MV_DEN_BIO BIO
INNER JOIN #GENERAL1 gen
    ON BIO.ID_NUMBER = gen.ID_NUMBER
INNER JOIN TASK tk
    ON BIO.PROSPECT_ID = tk.PROSPECT_ID
WHERE ((BIO.RECORD_STATUS_CODE)<>'D')
AND  ((tk.TASK_STATUS_CODE)='P') 
    GROUP BY
        BIO.PROSPECT_ID,
        tk.UNIT_CODE)

SELECT tk.PROSPECT_ID, CONVERT(varchar,pt.PT_DATE,101) AS PT_DATE, tk.UNIT_CODE AS PT_UNIT, tkr.ID_NUMBER AS PT_STAFF_ID, staff.NAME AS PT_STAFF_NAME
INTO #PT2
FROM #PT1 pt
INNER JOIN TASK tk
    ON pt.PROSPECT_ID = tk.PROSPECT_ID
LEFT JOIN TASK_RESPONSIBLE tkr
    ON tk.TASK_ID = tkr.TASK_ID
LEFT JOIN STAFF staff
    ON tkr.ID_NUMBER = staff.ID_NUMBER

WHERE pt.UNIT_CODE = tk.UNIT_CODE
AND pt.PT_DATE = tk.SCHED_DATE;

-- (18) SUBQUERY TO PULL CONCATENATE OF UNIT_CODE_SPECIFIC OTHER STAFF ASSIGNMENTS

DROP TABLE IF EXISTS #OS1
DROP TABLE IF EXISTS #OS2
DROP TABLE IF EXISTS #OS3;

SELECT BIO.ID_NUMBER, BIO.PROSPECT_ID, a.ASSIGNMENT_ID_NUMBER
INTO #OS1
FROM PSU_MV_DEN_BIO BIO
INNER JOIN #GENERAL1 gen
    ON BIO.ID_NUMBER = gen.ID_NUMBER
INNER JOIN ASSIGNMENT a
    ON BIO.PROSPECT_ID = a.PROSPECT_ID
WHERE BIO.RECORD_STATUS_CODE <> 'D'
AND a.OFFICE_CODE = @unit
AND a.ASSIGNMENT_TYPE = 'OS'
AND a.ACTIVE_IND = 'Y'

SELECT os.ID_NUMBER, s.NAME AS OTHER_STAFF
INTO #OS2
FROM #OS1 os
LEFT JOIN STAFF s
    ON os.ASSIGNMENT_ID_NUMBER = s.ID_NUMBER

SELECT os2.ID_NUMBER,
    STRING_AGG(os2.OTHER_STAFF, '; ')
        WITHIN GROUP (ORDER BY os2.OTHER_STAFF ASC) AS OTHER_STAFF
INTO #OS3
FROM #OS2 os2
GROUP BY os2.ID_NUMBER

-- (19) SUBQUERY TO CONCATENATE GS INFO

DROP TABLE IF EXISTS #GS1
DROP TABLE IF EXISTS #GS2
DROP TABLE IF EXISTS #GS3
DROP TABLE IF EXISTS #GS4;

SELECT DISTINCT BIO.ID_NUMBER, BIO.PROSPECT_ID, pro.PROPOSAL_ID, purp.PROGRAM_YEAR, tpro.SHORT_DESC AS PROPOSAL_STATUS, FORMAT(pro.ASK_AMT,'C0','en-us') AS ASK_AMT, FORMAT(pro.ANTICIPATED_AMT,'C0','en-us') AS ANTICIPATED_AMT, pro.UNIT_CODE, purp.SUBMIT_TYPE, tprost.SHORT_DESC AS SUBMIT_TYPE2, purp.SUBMITTER
INTO #GS1
FROM PSU_MV_DEN_BIO BIO
INNER JOIN #GENERAL1 gen
    ON BIO.ID_NUMBER = gen.ID_NUMBER
INNER JOIN PROPOSAL pro
    ON BIO.PROSPECT_ID = pro.PROSPECT_ID
INNER JOIN PSU_MV_DEN_PROP_PURPOSE purp
    ON pro.PROPOSAL_ID = purp.PROPOSAL_ID
LEFT JOIN TMS_PROPOSAL_STATUS tpro
    ON pro.PROPOSAL_STATUS_CODE = tpro.PROPOSAL_STATUS_CODE
LEFT JOIN TMS_PROPOSAL_SUBMIT_TYPE tprost
    ON pro.SUBMIT_TYPE = tprost.PROPOSAL_SUBMIT_TYPE_CODE
WHERE BIO.PRIMARY_IND = 'Y'
AND pro.PROPOSAL_TYPE IN ('GS', 'PP')
AND pro.ACTIVE_IND = 'Y'
AND tpro.PROPOSAL_STATUS_CODE IN ('A','T','E','V','P','I','C','B','K','S','G','M','Y')

-- CONCATENATE THE GS INFO ABOVE INTO ONE ROW

SELECT gs.ID_NUMBER, CONCAT('PROPOSAL# ', gs.PROPOSAL_ID,': ', gs.PROGRAM_YEAR,', ', gs.PROPOSAL_STATUS, ', ', gs.SUBMIT_TYPE2, ', ASK: ', gs.ASK_AMT,', ANTIC: ', gs.ANTICIPATED_AMT, ', UNIT: ', gs.UNIT_CODE, ', SUBMITTER: ', gs.SUBMITTER) AS GS_INFO
INTO #GS2
FROM #GS1 gs

SELECT DISTINCT gs.ID_NUMBER, gs2.GS_INFO
INTO #GS3
FROM #GS1 gs
LEFT JOIN #GS2 gs2 
    ON gs.ID_NUMBER = gs2.ID_NUMBER
ORDER BY gs.ID_NUMBER

SELECT gs3.ID_NUMBER,
    STRING_AGG(gs3.GS_INFO, '; ')
        WITHIN GROUP (ORDER BY gs3.GS_INFO ASC) AS GS_INFO
INTO #GS4
FROM #GS3 gs3
GROUP BY gs3.ID_NUMBER

-- (20) SUBQUERY TO PULL UNIT-SPECIFIC GIVING INFO

DROP TABLE IF EXISTS #GIFT1
DROP TABLE IF EXISTS #GIFT2
DROP TABLE IF EXISTS #GIFT3
DROP TABLE IF EXISTS #GIFT4;

SELECT DISTINCT BIO.ID_NUMBER, hh.ALLOC_SCHOOL_CODE, COUNT(hh.ID_NUMBER) AS #UNIT_SPECIFIC_GIFTS, SUM(hh.RECOGNITION_AMOUNT) AS TOTAL_UNIT_SPECIFIC_GIVING
INTO #GIFT1
FROM PSU_MV_DEN_BIO BIO
INNER JOIN #GENERAL1 gen
    ON BIO.ID_NUMBER = gen.ID_NUMBER
INNER JOIN PSU_G_V_HOUSEHOLD_DETAILS hh
    ON BIO.ID_NUMBER = hh.ID_NUMBER
WHERE BIO.RECORD_STATUS_CODE <> 'D'
AND hh.ALLOC_SCHOOL_CODE = @unit
GROUP BY BIO.ID_NUMBER,
        hh.ALLOC_SCHOOL_CODE

SELECT g.ID_NUMBER, g.ALLOC_SCHOOL_CODE, MAX(hh.DATE_OF_RECORD) AS LAST_UNIT_SPECIFIC_GIFT_DT
INTO #GIFT2 
FROM #GIFT1 g
INNER JOIN PSU_G_V_HOUSEHOLD_DETAILS hh
    ON g.ID_NUMBER = hh.ID_NUMBER
WHERE g.ALLOC_SCHOOL_CODE = hh.ALLOC_SCHOOL_CODE
GROUP BY g.ID_NUMBER,
        g.ALLOC_SCHOOL_CODE

SELECT g2.ID_NUMBER, CONVERT(date,g2.LAST_UNIT_SPECIFIC_GIFT_DT,101) AS LAST_UNIT_SPECIFIC_GIFT_DT, SUM(hh.RECOGNITION_AMOUNT) AS LAST_UNIT_SPECIFIC_GIFT_AMT
INTO #GIFT3
FROM #GIFT2 g2
INNER JOIN PSU_G_V_HOUSEHOLD_DETAILS hh
    ON g2.ID_NUMBER = hh.ID_NUMBER
LEFT JOIN #GIFT1 g
    ON g2.ID_NUMBER = g.ID_NUMBER
WHERE g2.ALLOC_SCHOOL_CODE = hh.ALLOC_SCHOOL_CODE
AND g2.LAST_UNIT_SPECIFIC_GIFT_DT = hh.DATE_OF_RECORD
GROUP BY g2.ID_NUMBER,
        g2.LAST_UNIT_SPECIFIC_GIFT_DT

SELECT g.ID_NUMBER, g.#UNIT_SPECIFIC_GIFTS, g.TOTAL_UNIT_SPECIFIC_GIVING, g3.LAST_UNIT_SPECIFIC_GIFT_DT, g3.LAST_UNIT_SPECIFIC_GIFT_AMT
INTO #GIFT4
FROM #GIFT1 g
LEFT JOIN #GIFT3 g3
    ON g.ID_NUMBER = g3.ID_NUMBER

-- (21) FINAL QUERY TO LINK ALL TEMP TABLES TO PULL ALL INFO 

SELECT distinct BIO.ID_NUMBER,  BIO.PERSON_OR_ORG,  BIO.RECORD_TYPE_CODE,  BIO.RECORD_STATUS_CODE,  BIO.REPORT_NAME,  BIO.LAST_NAME,  BIO.FIRST_NAME,  BIO.MIDDLE_NAME,  BIO.PREF_MAIL_NAME,  BIO.REQUEST_NO_EMAIL,  BIO.REQUEST_NO_MAIL,  BIO.MAIL_CODE1,  bd2.BIRTH_DT2, bd2.AGE, bd2.CAMPAIGN_END_AGE, BIO.GENDER,  BIO.ETHNIC_CODE,  BIO.PARENT,  BIO.PAST_PARENT,  BIO.STUDENT,  BIO.PAST_STUDENT,  BIO.MEMB_STATUS_CODE AS PSAA_MEMB_STATUS,  BIO.MARITAL_STATUS_CODE,  BIO.SPOUSE_ID_NUMBER,  BIO.SPOUSE_NAME, sbd3.SPOUSE_BIRTH_DATE, sbd3.SPOUSE_AGE, sbd3.SPOUSE_CAMPAIGN_END_AGE, sp6.#SPOUSE_PSU_DEGREES, sp6.#SPOUSE_SPECIFIC_SCHOOL_CODE_DEGREES, sp9.SPOUSE_DEGREE_INFO, sp11.SPOUSE_JOB_TITLE, sp11.SPOUSE_EMPLOYER, sp11.SPOUSE_HJT, BIO.JNT_SALUTATION,  BIO.PREF_CLASS_YEAR,  BIO.PREF_SCHOOL_CODE,  BIO.PREF_DEGREE_LEVEL,  BIO.PREF_CAMPUS,  d5.#PSU_DEGREES, d5.#SCHOOL_SPECIFIC_DEGREES, d7.DEGREE_INFO, sa1.#PSU_STUDENT_ACTIVITIES, BIO.EMAIL_IND,  BIO.HOME_CITY,  BIO.HOME_STATE,  BIO.HOME_ZIPCODE,  BIO.HOME_COUNTY_CODE,  Hcounty.SHORT_DESC AS HOMECOUNTY, BIO.HOME_COUNTRY_CODE,  BIO.HOME_DEVELOPMENT_GEO, (Hgeo.DESCRIPTION) AS HOME_GEO, BIO.HOME_WEALTHY_GEO,  BIO.JOB_TITLE,  BIO.EMPLOYER_NAME1, pl.SHORT_DESC AS HJT, BIO.BUSN_CITY,  BIO.BUSN_STATE,  BIO.BUSN_COUNTY_CODE,  Bcounty.SHORT_DESC AS BUSNCOUNTY, BIO.BUSN_COUNTRY_CODE,  BIO.BUSN_DEVELOPMENT_GEO,  (Bgeo.DESCRIPTION) AS BUSN_GEO, BIO.PREF_CITY,  BIO.PREF_STATE,  BIO.PREF_ZIPCODE,  BIO.PREF_COUNTY_CODE,  Pcounty.SHORT_DESC AS PREFCOUNTY, BIO.PREF_COUNTRY_CODE,  BIO.PREF_DEVELOPMENT_GEO,  (Pgeo.DESCRIPTION) AS PREF_GEO, BIO.PREF_WEALTHY_GEO,  BIO.PROSPECT_ID,  BIO.PRIMARY_IND,  BIO.ACTIVE_IND,  BIO.PROSPECT_NAME, mp.SHORT_DESC AS MAJOR_PROSPECT_STATUS, BIO.PROSPECT_TYPE, pt.SHORT_DESC AS PROSPECT_TYPE2, classf.SHORT_DESC AS CLASSIFICATION, assignt.SHORT_DESC AS ASSIGN_TYPE, BIO.ASSIGNMENT_TYPE,  BIO.PROSPECT_GROUP_CODE, pg.SHORT_DESC AS PROSPECT_GROUP, BIO.STAFF_NAME, os3.OTHER_STAFF, stage.SHORT_DESC AS STAGE, CONVERT(varchar,BIO.PROSPECT_START_DATE,101) AS PROSPECT_START_DATE, CONVERT(varchar,BIO.PROSPECT_STOP_DATE,101) AS PROSPECT_STOP_DATE, BIO.PG_PROSPECT_IND, gs4.GS_INFO, BIO.LIFET_ACTUAL_AMT, BIO.CAMP_ACTUAL_AMT, BIO.HH_RECOGNITION, g4.#UNIT_SPECIFIC_GIFTS, g4.TOTAL_UNIT_SPECIFIC_GIVING, g4.LAST_UNIT_SPECIFIC_GIFT_DT, g4.LAST_UNIT_SPECIFIC_GIFT_AMT, awarating.SHORT_DESC AS AWA_RATING, gga2.GGA_DATE, gga2.GGA_RATING, BIO.PG_DP_RATING,  BIO.PG_DP_AMT,  BIO.MG_DP_RATING,  BIO.MG_DP_AMT,  BIO.ALG_DP_RATING,  BIO.ALG_DP_AMT, ka2.KA_DATE, ka2.KA_AMT, ka2.KA_RATING, ka2.KA_COMMENT, ew2.EW_DATE, ew2.EW_AMT, ew2.EW_RATING, cr3.LAST_ROC_DT2, cr3.LAST_ROC_TYPE, cr3.LAST_ROC_OUTCOME, cr4.LAST_VISIT_DT2, cr4.LAST_VISIT_OUTCOME, pt2.PT_DATE, pt2.PT_UNIT, pt2.PT_STAFF_NAME, zp2.LATITUDE, zp2.LONGITUDE, zp2.START_ZIP AS FIVE_DIGIT_ZIP
INTO #GENERAL_EXPORT
FROM PSU_MV_DEN_BIO BIO
INNER JOIN #GENERAL1 gen
    ON BIO.ID_NUMBER = gen.ID_NUMBER
LEFT JOIN #BD2 bd2  
    ON BIO.ID_NUMBER = bd2.ID_NUMBER
LEFT JOIN #SBD3 sbd3
    ON BIO.ID_NUMBER = sbd3.ID_NUMBER
LEFT JOIN #DEG5 d5
    ON BIO.ID_NUMBER = d5.ID_NUMBER
LEFT JOIN #DEG7 d7
    ON BIO.ID_NUMBER = d7.ID_NUMBER
LEFT JOIN #SPOUSE6 sp6
    ON BIO.ID_NUMBER = sp6.ID_NUMBER
LEFT JOIN #SPOUSE9 sp9
    ON BIO.ID_NUMBER = sp9.ID_NUMBER
LEFT JOIN #ROC3 cr3
    ON BIO.ID_NUMBER = cr3.ID_NUMBER
LEFT JOIN #ROC4 cr4
    ON BIO.ID_NUMBER = cr4.ID_NUMBER
LEFT JOIN #SPOUSE11 sp11
    ON BIO.ID_NUMBER = sp11.ID_NUMBER
LEFT JOIN #ZIP2 zp2
    ON BIO.ID_NUMBER = zp2.ID_NUMBER
LEFT JOIN #SA1 sa1
    ON BIO.ID_NUMBER = sa1.ID_NUMBER
LEFT JOIN #GGA2 gga2
    ON BIO.ID_NUMBER = gga2.ID_NUMBER
LEFT JOIN #KA2 ka2
    ON BIO.ID_NUMBER = ka2.ID_NUMBER
LEFT JOIN #EW2 ew2
    ON BIO.ID_NUMBER = ew2.ID_NUMBER
LEFT JOIN #PT2 pt2
    ON BIO.PROSPECT_ID = pt2.PROSPECT_ID
LEFT JOIN #OS3 os3
    ON BIO.ID_NUMBER = os3.ID_NUMBER
LEFT JOIN #GS4 gs4
    ON BIO.ID_NUMBER = gs4.ID_NUMBER
LEFT JOIN #GIFT4 g4
    ON BIO.ID_NUMBER = g4.ID_NUMBER
LEFT JOIN TMS_CLASSIFICATION classf
    ON BIO.CLASSIFICATION_CODE = classf.CLASSIFICATION_CODE
LEFT JOIN TMS_COUNTY Hcounty
    ON BIO.PREF_COUNTY_CODE = Hcounty.COUNTY_CODE 
LEFT JOIN TMS_COUNTY Pcounty
    ON BIO.BUSN_COUNTY_CODE = Pcounty.COUNTY_CODE 
LEFT JOIN TMS_COUNTY Bcounty
    ON BIO.HOME_COUNTY_CODE = Bcounty.COUNTY_CODE 
LEFT JOIN TMS_MAJOR_PROSPECT mp
    ON BIO.MAJOR_PROSPECT_CODE = mp.MAJOR_PROSPECT_CODE 
LEFT JOIN TMS_POSITION_LEVEL pl
    ON BIO.POSITION_LEVEL_CODE = pl.POSITION_LEVEL_CODE
LEFT JOIN TMS_PROSPECT_GROUP pg
    ON BIO.PROSPECT_GROUP_CODE = pg.PROSPECT_GROUP_CODE
LEFT JOIN TMS_PROSPECT_TYPE pt
    ON BIO.PROSPECT_TYPE = pt.PROSPECT_TYPE
LEFT JOIN TMS_STAGE stage
    ON BIO.STAGE_CODE = stage.STAGE_CODE
LEFT JOIN TMS_RATING awarating
    ON BIO.RATING_CODE = awarating.RATING_CODE
LEFT JOIN GEO_CODE Hgeo
    ON BIO.HOME_DEVELOPMENT_GEO = Hgeo.GEO_CODE
LEFT JOIN GEO_CODE Pgeo
    ON BIO.PREF_DEVELOPMENT_GEO = Pgeo.GEO_CODE
LEFT JOIN GEO_CODE Bgeo
    ON BIO.BUSN_DEVELOPMENT_GEO = Bgeo.GEO_CODE
LEFT JOIN TMS_ASSIGNMENT_TYPE assignt   
    ON BIO.ASSIGNMENT_TYPE = assignt.ASSIGNMENT_TYPE
ORDER BY BIO.MG_DP_AMT DESC

SELECT *
FROM #GENERAL_EXPORT genex


-- TO EXPORT LIST, CLICK ON THE EXPORT TO EXCEL LOCATED AT THE FAR RIGHT - 2ND ICON FROM THE TOP - IN THE RESULTS SECTION BELOW